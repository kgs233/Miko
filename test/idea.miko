namespace Program;

open Std.System.IO;
open Std.Types;

public const Type1 : struct
{
    var a : Int = 1;
    var b : ref Int = a;
}

public const Type2 : Type1
{
    var a : Int = 2;
}

only(Type1,Type2) const Type3 : struct
{
    
}

function ErrorExp(in : Int32) : Int32
{
    if(in == 0)
    {
        throw "This is a Error";
    }
    else
    {
        return in;
    }
}

const main : function(args : String[]) -> byte(32)
{
    stdout("Hello World\n");
    var a : (String, String) = ("Hello Miko", "Hello World");
    stdout a;

    a : catch("This is a Error") Int32 = try ErrorExp(0);

    if(try ErrorExp(0) == catch(String))
    {
        stdout("Error!");
    }
    return 0;
}


const PI : float  

var AFun : function -> Int32;
var BFun : function(Int32);

const FunctionD : (const A : Int32) -> Int32
{

}

const MatchTypeVar : match(B) ->
{
    1 -> return Int32,
    2 -> return Float
}

match(Test) ->
{
    1 -> stdout("One"),
    2 -> stdout("Two"),
    3 -> match(Test)
    {
        5 ->
        {
            ...
        }
        6 ->
        {
            ...
        }
    }
    4 ->
    {
        ...
    }
}
else
{
    ...
}

match if(Test) ->
{
    Test > 1
    {
        ...
    }

    Test < 1
    {
        ...
    }
}
else
{
    ...
}

for(var i : Int32 = 0; i < 10; i++)
{
    ...
}

for(i : Int32 = 0, a : type;
    i < 10;
    {i++; a = Arg[i]})
{
    ...
}