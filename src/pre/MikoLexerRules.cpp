
// Generated from ./MikoLexerRules.g4 by ANTLR 4.13.2


#include "MikoLexerRules.h"


using namespace antlr4;

using namespace Miko;


using namespace antlr4;

namespace {

struct MikoLexerRulesStaticData final {
  MikoLexerRulesStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MikoLexerRulesStaticData(const MikoLexerRulesStaticData&) = delete;
  MikoLexerRulesStaticData(MikoLexerRulesStaticData&&) = delete;
  MikoLexerRulesStaticData& operator=(const MikoLexerRulesStaticData&) = delete;
  MikoLexerRulesStaticData& operator=(MikoLexerRulesStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mikolexerrulesLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<MikoLexerRulesStaticData> mikolexerrulesLexerStaticData = nullptr;

void mikolexerrulesLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mikolexerrulesLexerStaticData != nullptr) {
    return;
  }
#else
  assert(mikolexerrulesLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MikoLexerRulesStaticData>(
    std::vector<std::string>{
      "VAR", "CONST", "DEFINE", "OPEN", "THIS", "PUBLIC", "PRIVATE", "LOCAL", 
      "ENUM", "STRUCT", "STATIC", "IF", "ELSE", "MATCH", "FOR", "FOREACH", 
      "WHILE", "BREAK", "NEXT", "RETURN", "ID", "INT", "CHAR", "FLOAT", 
      "STRING", "DOT", "SEMIC", "COLON", "COMMA", "ADD", "MIN", "MUL", "DIV", 
      "MOD", "AND", "OR", "NOT", "BIG", "BIG_EQ", "SMALL", "SMALL_EQ", "DOB_EQ", 
      "NOT_EQ", "BITAND", "BITOR", "BITXOR", "BITNOT", "LSHIFT", "RSHIFT", 
      "DADD", "DMIN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
      "RBRACK", "ASS", "MUL_ASS", "DIV_ASS", "MOD_ASS", "ADD_ASS", "MIN_ASS", 
      "LSHIFT_ASS", "RSHIFT_ASS", "BITAND_ASS", "BITXOR_ASS", "BITOR_ASS", 
      "LAMBDA", "WS", "DEC_DIGITS", "DEC_START_DIGIT", "DEC_CONTINUE_DIGIT", 
      "OCT_DIGITS", "OCT_PREFIX", "OCT_DIGIT", "HEX_DIGITS", "HEX_PREFIX", 
      "HEX_DIGIT", "EPACES", "ID_CONTINUE_CHAR", "ID_START_CHAR"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'var'", "'const'", "'define'", "'open'", "'this'", "'public'", 
      "'private'", "'local'", "'enum'", "'struct'", "'static'", "'if'", 
      "'else'", "'match'", "'for'", "'foreach'", "'while'", "'break'", "'next'", 
      "'return'", "", "", "", "", "", "'.'", "';'", "':'", "','", "'+'", 
      "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'>'", "'>='", 
      "'<'", "'<='", "'=='", "'!='", "'&'", "'|'", "'^'", "'~'", "'<<'", 
      "'>>'", "'++'", "'--'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
      "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
      "'^='", "'|='", "'\\'"
    },
    std::vector<std::string>{
      "", "VAR", "CONST", "DEFINE", "OPEN", "THIS", "PUBLIC", "PRIVATE", 
      "LOCAL", "ENUM", "STRUCT", "STATIC", "IF", "ELSE", "MATCH", "FOR", 
      "FOREACH", "WHILE", "BREAK", "NEXT", "RETURN", "ID", "INT", "CHAR", 
      "FLOAT", "STRING", "DOT", "SEMIC", "COLON", "COMMA", "ADD", "MIN", 
      "MUL", "DIV", "MOD", "AND", "OR", "NOT", "BIG", "BIG_EQ", "SMALL", 
      "SMALL_EQ", "DOB_EQ", "NOT_EQ", "BITAND", "BITOR", "BITXOR", "BITNOT", 
      "LSHIFT", "RSHIFT", "DADD", "DMIN", "LPAREN", "RPAREN", "LBRACE", 
      "RBRACE", "LBRACK", "RBRACK", "ASS", "MUL_ASS", "DIV_ASS", "MOD_ASS", 
      "ADD_ASS", "MIN_ASS", "LSHIFT_ASS", "RSHIFT_ASS", "BITAND_ASS", "BITXOR_ASS", 
      "BITOR_ASS", "LAMBDA", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,70,490,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,1,0,1,0,1,1,1,1,
  	1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,
  	4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
  	1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
  	9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
  	1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,20,1,20,5,20,285,8,20,10,20,12,20,288,9,20,1,21,1,21,1,21,
  	3,21,293,8,21,1,22,1,22,1,22,1,22,3,22,299,8,22,1,22,1,22,1,23,1,23,3,
  	23,305,8,23,1,23,1,23,1,23,4,23,310,8,23,11,23,12,23,311,3,23,314,8,23,
  	1,24,1,24,1,24,1,24,5,24,320,8,24,10,24,12,24,323,9,24,1,24,1,24,1,25,
  	1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
  	1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
  	1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,
  	1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,
  	1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,
  	1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,
  	1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
  	1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,69,4,69,438,
  	8,69,11,69,12,69,439,1,69,1,69,1,70,1,70,5,70,446,8,70,10,70,12,70,449,
  	9,70,1,71,1,71,1,72,1,72,1,73,1,73,5,73,457,8,73,10,73,12,73,460,9,73,
  	1,74,1,74,1,75,1,75,1,76,1,76,4,76,468,8,76,11,76,12,76,469,1,77,1,77,
  	1,77,1,78,1,78,1,79,1,79,5,79,479,8,79,10,79,12,79,482,9,79,1,80,1,80,
  	3,80,486,8,80,1,81,3,81,489,8,81,2,321,480,0,82,1,1,3,2,5,3,7,4,9,5,11,
  	6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
  	83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
  	63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,0,143,0,145,0,
  	147,0,149,0,151,0,153,0,155,0,157,0,159,0,161,0,163,0,1,0,10,1,0,39,39,
  	1,0,34,34,3,0,9,10,13,13,32,32,1,0,49,57,1,0,48,57,1,0,48,55,2,0,88,88,
  	120,120,3,0,48,57,65,70,97,102,148,0,48,57,768,879,1155,1158,1425,1465,
  	1467,1469,1471,1471,1473,1474,1476,1477,1479,1479,1552,1557,1611,1630,
  	1632,1641,1648,1648,1750,1756,1759,1764,1767,1768,1770,1773,1776,1785,
  	1809,1809,1840,1866,1958,1968,2305,2307,2364,2364,2366,2381,2385,2388,
  	2402,2403,2406,2415,2433,2435,2492,2492,2494,2500,2503,2504,2507,2509,
  	2519,2519,2530,2531,2534,2543,2561,2563,2620,2620,2622,2626,2631,2632,
  	2635,2637,2662,2673,2689,2691,2748,2748,2750,2757,2759,2761,2763,2765,
  	2786,2787,2790,2799,2817,2819,2876,2876,2878,2883,2887,2888,2891,2893,
  	2902,2903,2918,2927,2946,2946,3006,3010,3014,3016,3018,3021,3031,3031,
  	3046,3055,3073,3075,3134,3140,3142,3144,3146,3149,3157,3158,3174,3183,
  	3202,3203,3260,3260,3262,3268,3270,3272,3274,3277,3285,3286,3302,3311,
  	3330,3331,3390,3395,3398,3400,3402,3405,3415,3415,3430,3439,3458,3459,
  	3530,3530,3535,3540,3542,3542,3544,3551,3570,3571,3633,3633,3636,3642,
  	3655,3662,3664,3673,3761,3761,3764,3769,3771,3772,3784,3789,3792,3801,
  	3864,3865,3872,3881,3893,3893,3895,3895,3897,3897,3902,3903,3953,3972,
  	3974,3975,3984,3991,3993,4028,4038,4038,4140,4146,4150,4153,4160,4169,
  	4182,4185,4959,4959,4969,4977,5906,5908,5938,5940,5970,5971,6002,6003,
  	6070,6099,6109,6109,6112,6121,6155,6157,6160,6169,6313,6313,6432,6443,
  	6448,6459,6470,6479,6576,6592,6600,6601,6608,6617,6679,6683,7616,7619,
  	8255,8256,8276,8276,8400,8412,8417,8417,8421,8427,12330,12335,12441,12442,
  	43010,43010,43014,43014,43019,43019,43043,43047,64286,64286,65024,65039,
  	65056,65059,65075,65076,65101,65103,65296,65305,65343,65343,295,0,65,
  	90,95,95,97,122,170,170,181,181,186,186,192,214,216,246,248,577,592,705,
  	710,721,736,740,750,750,890,890,902,902,904,906,908,908,910,929,931,974,
  	976,1013,1015,1153,1162,1230,1232,1273,1280,1295,1329,1366,1369,1369,
  	1377,1415,1488,1514,1520,1522,1569,1594,1600,1610,1646,1647,1649,1747,
  	1749,1749,1765,1766,1774,1775,1786,1788,1791,1791,1808,1808,1810,1839,
  	1869,1901,1920,1957,1969,1969,2308,2361,2365,2365,2384,2384,2392,2401,
  	2429,2429,2437,2444,2447,2448,2451,2472,2474,2480,2482,2482,2486,2489,
  	2493,2493,2510,2510,2524,2525,2527,2529,2544,2545,2565,2570,2575,2576,
  	2579,2600,2602,2608,2610,2611,2613,2614,2616,2617,2649,2652,2654,2654,
  	2674,2676,2693,2701,2703,2705,2707,2728,2730,2736,2738,2739,2741,2745,
  	2749,2749,2768,2768,2784,2785,2821,2828,2831,2832,2835,2856,2858,2864,
  	2866,2867,2869,2873,2877,2877,2908,2909,2911,2913,2929,2929,2947,2947,
  	2949,2954,2958,2960,2962,2965,2969,2970,2972,2972,2974,2975,2979,2980,
  	2984,2986,2990,3001,3077,3084,3086,3088,3090,3112,3114,3123,3125,3129,
  	3168,3169,3205,3212,3214,3216,3218,3240,3242,3251,3253,3257,3261,3261,
  	3294,3294,3296,3297,3333,3340,3342,3344,3346,3368,3370,3385,3424,3425,
  	3461,3478,3482,3505,3507,3515,3517,3517,3520,3526,3585,3632,3634,3635,
  	3648,3654,3713,3714,3716,3716,3719,3720,3722,3722,3725,3725,3732,3735,
  	3737,3743,3745,3747,3749,3749,3751,3751,3754,3755,3757,3760,3762,3763,
  	3773,3773,3776,3780,3782,3782,3804,3805,3840,3840,3904,3911,3913,3946,
  	3976,3979,4096,4129,4131,4135,4137,4138,4176,4181,4256,4293,4304,4346,
  	4348,4348,4352,4441,4447,4514,4520,4601,4608,4680,4682,4685,4688,4694,
  	4696,4696,4698,4701,4704,4744,4746,4749,4752,4784,4786,4789,4792,4798,
  	4800,4800,4802,4805,4808,4822,4824,4880,4882,4885,4888,4954,4992,5007,
  	5024,5108,5121,5740,5743,5750,5761,5786,5792,5866,5870,5872,5888,5900,
  	5902,5905,5920,5937,5952,5969,5984,5996,5998,6000,6016,6067,6103,6103,
  	6108,6108,6176,6263,6272,6312,6400,6428,6480,6509,6512,6516,6528,6569,
  	6593,6599,6656,6678,7424,7615,7680,7835,7840,7929,7936,7957,7960,7965,
  	7968,8005,8008,8013,8016,8023,8025,8025,8027,8027,8029,8029,8031,8061,
  	8064,8116,8118,8124,8126,8126,8130,8132,8134,8140,8144,8147,8150,8155,
  	8160,8172,8178,8180,8182,8188,8305,8305,8319,8319,8336,8340,8450,8450,
  	8455,8455,8458,8467,8469,8469,8472,8477,8484,8484,8486,8486,8488,8488,
  	8490,8497,8499,8505,8508,8511,8517,8521,8544,8579,11264,11310,11312,11358,
  	11392,11492,11520,11557,11568,11621,11631,11631,11648,11670,11680,11686,
  	11688,11694,11696,11702,11704,11710,11712,11718,11720,11726,11728,11734,
  	11736,11742,12293,12295,12321,12329,12337,12341,12344,12348,12353,12438,
  	12443,12447,12449,12538,12540,12543,12549,12588,12593,12686,12704,12727,
  	12784,12799,13312,19893,19968,40891,40960,42124,43008,43009,43011,43013,
  	43015,43018,43020,43042,44032,55203,63744,64045,64048,64106,64112,64217,
  	64256,64262,64275,64279,64285,64285,64287,64296,64298,64310,64312,64316,
  	64318,64318,64320,64321,64323,64324,64326,64433,64467,64829,64848,64911,
  	64914,64967,65008,65019,65136,65140,65142,65276,65313,65338,65345,65370,
  	65382,65470,65474,65479,65482,65487,65490,65495,65498,65500,494,0,1,1,
  	0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
  	13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
  	0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
  	0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
  	45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
  	0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
  	0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
  	77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
  	0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
  	0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,
  	0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,
  	0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,
  	0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,
  	0,0,139,1,0,0,0,1,165,1,0,0,0,3,169,1,0,0,0,5,175,1,0,0,0,7,182,1,0,0,
  	0,9,187,1,0,0,0,11,192,1,0,0,0,13,199,1,0,0,0,15,207,1,0,0,0,17,213,1,
  	0,0,0,19,218,1,0,0,0,21,225,1,0,0,0,23,232,1,0,0,0,25,235,1,0,0,0,27,
  	240,1,0,0,0,29,246,1,0,0,0,31,250,1,0,0,0,33,258,1,0,0,0,35,264,1,0,0,
  	0,37,270,1,0,0,0,39,275,1,0,0,0,41,282,1,0,0,0,43,292,1,0,0,0,45,294,
  	1,0,0,0,47,304,1,0,0,0,49,315,1,0,0,0,51,326,1,0,0,0,53,328,1,0,0,0,55,
  	330,1,0,0,0,57,332,1,0,0,0,59,334,1,0,0,0,61,336,1,0,0,0,63,338,1,0,0,
  	0,65,340,1,0,0,0,67,342,1,0,0,0,69,344,1,0,0,0,71,347,1,0,0,0,73,350,
  	1,0,0,0,75,352,1,0,0,0,77,354,1,0,0,0,79,357,1,0,0,0,81,359,1,0,0,0,83,
  	362,1,0,0,0,85,365,1,0,0,0,87,368,1,0,0,0,89,370,1,0,0,0,91,372,1,0,0,
  	0,93,374,1,0,0,0,95,376,1,0,0,0,97,379,1,0,0,0,99,382,1,0,0,0,101,385,
  	1,0,0,0,103,388,1,0,0,0,105,390,1,0,0,0,107,392,1,0,0,0,109,394,1,0,0,
  	0,111,396,1,0,0,0,113,398,1,0,0,0,115,400,1,0,0,0,117,402,1,0,0,0,119,
  	405,1,0,0,0,121,408,1,0,0,0,123,411,1,0,0,0,125,414,1,0,0,0,127,417,1,
  	0,0,0,129,421,1,0,0,0,131,425,1,0,0,0,133,428,1,0,0,0,135,431,1,0,0,0,
  	137,434,1,0,0,0,139,437,1,0,0,0,141,443,1,0,0,0,143,450,1,0,0,0,145,452,
  	1,0,0,0,147,454,1,0,0,0,149,461,1,0,0,0,151,463,1,0,0,0,153,465,1,0,0,
  	0,155,471,1,0,0,0,157,474,1,0,0,0,159,476,1,0,0,0,161,485,1,0,0,0,163,
  	488,1,0,0,0,165,166,5,118,0,0,166,167,5,97,0,0,167,168,5,114,0,0,168,
  	2,1,0,0,0,169,170,5,99,0,0,170,171,5,111,0,0,171,172,5,110,0,0,172,173,
  	5,115,0,0,173,174,5,116,0,0,174,4,1,0,0,0,175,176,5,100,0,0,176,177,5,
  	101,0,0,177,178,5,102,0,0,178,179,5,105,0,0,179,180,5,110,0,0,180,181,
  	5,101,0,0,181,6,1,0,0,0,182,183,5,111,0,0,183,184,5,112,0,0,184,185,5,
  	101,0,0,185,186,5,110,0,0,186,8,1,0,0,0,187,188,5,116,0,0,188,189,5,104,
  	0,0,189,190,5,105,0,0,190,191,5,115,0,0,191,10,1,0,0,0,192,193,5,112,
  	0,0,193,194,5,117,0,0,194,195,5,98,0,0,195,196,5,108,0,0,196,197,5,105,
  	0,0,197,198,5,99,0,0,198,12,1,0,0,0,199,200,5,112,0,0,200,201,5,114,0,
  	0,201,202,5,105,0,0,202,203,5,118,0,0,203,204,5,97,0,0,204,205,5,116,
  	0,0,205,206,5,101,0,0,206,14,1,0,0,0,207,208,5,108,0,0,208,209,5,111,
  	0,0,209,210,5,99,0,0,210,211,5,97,0,0,211,212,5,108,0,0,212,16,1,0,0,
  	0,213,214,5,101,0,0,214,215,5,110,0,0,215,216,5,117,0,0,216,217,5,109,
  	0,0,217,18,1,0,0,0,218,219,5,115,0,0,219,220,5,116,0,0,220,221,5,114,
  	0,0,221,222,5,117,0,0,222,223,5,99,0,0,223,224,5,116,0,0,224,20,1,0,0,
  	0,225,226,5,115,0,0,226,227,5,116,0,0,227,228,5,97,0,0,228,229,5,116,
  	0,0,229,230,5,105,0,0,230,231,5,99,0,0,231,22,1,0,0,0,232,233,5,105,0,
  	0,233,234,5,102,0,0,234,24,1,0,0,0,235,236,5,101,0,0,236,237,5,108,0,
  	0,237,238,5,115,0,0,238,239,5,101,0,0,239,26,1,0,0,0,240,241,5,109,0,
  	0,241,242,5,97,0,0,242,243,5,116,0,0,243,244,5,99,0,0,244,245,5,104,0,
  	0,245,28,1,0,0,0,246,247,5,102,0,0,247,248,5,111,0,0,248,249,5,114,0,
  	0,249,30,1,0,0,0,250,251,5,102,0,0,251,252,5,111,0,0,252,253,5,114,0,
  	0,253,254,5,101,0,0,254,255,5,97,0,0,255,256,5,99,0,0,256,257,5,104,0,
  	0,257,32,1,0,0,0,258,259,5,119,0,0,259,260,5,104,0,0,260,261,5,105,0,
  	0,261,262,5,108,0,0,262,263,5,101,0,0,263,34,1,0,0,0,264,265,5,98,0,0,
  	265,266,5,114,0,0,266,267,5,101,0,0,267,268,5,97,0,0,268,269,5,107,0,
  	0,269,36,1,0,0,0,270,271,5,110,0,0,271,272,5,101,0,0,272,273,5,120,0,
  	0,273,274,5,116,0,0,274,38,1,0,0,0,275,276,5,114,0,0,276,277,5,101,0,
  	0,277,278,5,116,0,0,278,279,5,117,0,0,279,280,5,114,0,0,280,281,5,110,
  	0,0,281,40,1,0,0,0,282,286,3,163,81,0,283,285,3,161,80,0,284,283,1,0,
  	0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,42,1,0,0,0,288,
  	286,1,0,0,0,289,293,3,141,70,0,290,293,3,147,73,0,291,293,3,153,76,0,
  	292,289,1,0,0,0,292,290,1,0,0,0,292,291,1,0,0,0,293,44,1,0,0,0,294,298,
  	5,39,0,0,295,299,3,159,79,0,296,299,8,0,0,0,297,299,9,0,0,0,298,295,1,
  	0,0,0,298,296,1,0,0,0,298,297,1,0,0,0,299,300,1,0,0,0,300,301,5,39,0,
  	0,301,46,1,0,0,0,302,305,3,141,70,0,303,305,5,48,0,0,304,302,1,0,0,0,
  	304,303,1,0,0,0,305,306,1,0,0,0,306,313,5,46,0,0,307,314,3,141,70,0,308,
  	310,5,48,0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,0,311,312,
  	1,0,0,0,312,314,1,0,0,0,313,307,1,0,0,0,313,309,1,0,0,0,314,48,1,0,0,
  	0,315,321,5,34,0,0,316,320,3,159,79,0,317,320,8,1,0,0,318,320,9,0,0,0,
  	319,316,1,0,0,0,319,317,1,0,0,0,319,318,1,0,0,0,320,323,1,0,0,0,321,322,
  	1,0,0,0,321,319,1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,325,5,34,
  	0,0,325,50,1,0,0,0,326,327,5,46,0,0,327,52,1,0,0,0,328,329,5,59,0,0,329,
  	54,1,0,0,0,330,331,5,58,0,0,331,56,1,0,0,0,332,333,5,44,0,0,333,58,1,
  	0,0,0,334,335,5,43,0,0,335,60,1,0,0,0,336,337,5,45,0,0,337,62,1,0,0,0,
  	338,339,5,42,0,0,339,64,1,0,0,0,340,341,5,47,0,0,341,66,1,0,0,0,342,343,
  	5,37,0,0,343,68,1,0,0,0,344,345,5,38,0,0,345,346,5,38,0,0,346,70,1,0,
  	0,0,347,348,5,124,0,0,348,349,5,124,0,0,349,72,1,0,0,0,350,351,5,33,0,
  	0,351,74,1,0,0,0,352,353,5,62,0,0,353,76,1,0,0,0,354,355,5,62,0,0,355,
  	356,5,61,0,0,356,78,1,0,0,0,357,358,5,60,0,0,358,80,1,0,0,0,359,360,5,
  	60,0,0,360,361,5,61,0,0,361,82,1,0,0,0,362,363,5,61,0,0,363,364,5,61,
  	0,0,364,84,1,0,0,0,365,366,5,33,0,0,366,367,5,61,0,0,367,86,1,0,0,0,368,
  	369,5,38,0,0,369,88,1,0,0,0,370,371,5,124,0,0,371,90,1,0,0,0,372,373,
  	5,94,0,0,373,92,1,0,0,0,374,375,5,126,0,0,375,94,1,0,0,0,376,377,5,60,
  	0,0,377,378,5,60,0,0,378,96,1,0,0,0,379,380,5,62,0,0,380,381,5,62,0,0,
  	381,98,1,0,0,0,382,383,5,43,0,0,383,384,5,43,0,0,384,100,1,0,0,0,385,
  	386,5,45,0,0,386,387,5,45,0,0,387,102,1,0,0,0,388,389,5,40,0,0,389,104,
  	1,0,0,0,390,391,5,41,0,0,391,106,1,0,0,0,392,393,5,123,0,0,393,108,1,
  	0,0,0,394,395,5,125,0,0,395,110,1,0,0,0,396,397,5,91,0,0,397,112,1,0,
  	0,0,398,399,5,93,0,0,399,114,1,0,0,0,400,401,5,61,0,0,401,116,1,0,0,0,
  	402,403,5,42,0,0,403,404,5,61,0,0,404,118,1,0,0,0,405,406,5,47,0,0,406,
  	407,5,61,0,0,407,120,1,0,0,0,408,409,5,37,0,0,409,410,5,61,0,0,410,122,
  	1,0,0,0,411,412,5,43,0,0,412,413,5,61,0,0,413,124,1,0,0,0,414,415,5,45,
  	0,0,415,416,5,61,0,0,416,126,1,0,0,0,417,418,5,60,0,0,418,419,5,60,0,
  	0,419,420,5,61,0,0,420,128,1,0,0,0,421,422,5,62,0,0,422,423,5,62,0,0,
  	423,424,5,61,0,0,424,130,1,0,0,0,425,426,5,38,0,0,426,427,5,61,0,0,427,
  	132,1,0,0,0,428,429,5,94,0,0,429,430,5,61,0,0,430,134,1,0,0,0,431,432,
  	5,124,0,0,432,433,5,61,0,0,433,136,1,0,0,0,434,435,5,92,0,0,435,138,1,
  	0,0,0,436,438,7,2,0,0,437,436,1,0,0,0,438,439,1,0,0,0,439,437,1,0,0,0,
  	439,440,1,0,0,0,440,441,1,0,0,0,441,442,6,69,0,0,442,140,1,0,0,0,443,
  	447,3,143,71,0,444,446,3,145,72,0,445,444,1,0,0,0,446,449,1,0,0,0,447,
  	445,1,0,0,0,447,448,1,0,0,0,448,142,1,0,0,0,449,447,1,0,0,0,450,451,7,
  	3,0,0,451,144,1,0,0,0,452,453,7,4,0,0,453,146,1,0,0,0,454,458,3,149,74,
  	0,455,457,3,151,75,0,456,455,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,
  	458,459,1,0,0,0,459,148,1,0,0,0,460,458,1,0,0,0,461,462,5,48,0,0,462,
  	150,1,0,0,0,463,464,7,5,0,0,464,152,1,0,0,0,465,467,3,155,77,0,466,468,
  	3,157,78,0,467,466,1,0,0,0,468,469,1,0,0,0,469,467,1,0,0,0,469,470,1,
  	0,0,0,470,154,1,0,0,0,471,472,5,48,0,0,472,473,7,6,0,0,473,156,1,0,0,
  	0,474,475,7,7,0,0,475,158,1,0,0,0,476,480,5,92,0,0,477,479,9,0,0,0,478,
  	477,1,0,0,0,479,482,1,0,0,0,480,481,1,0,0,0,480,478,1,0,0,0,481,160,1,
  	0,0,0,482,480,1,0,0,0,483,486,3,163,81,0,484,486,7,8,0,0,485,483,1,0,
  	0,0,485,484,1,0,0,0,486,162,1,0,0,0,487,489,7,9,0,0,488,487,1,0,0,0,489,
  	164,1,0,0,0,16,0,286,292,298,304,311,313,319,321,439,447,458,469,480,
  	485,488,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mikolexerrulesLexerStaticData = std::move(staticData);
}

}

MikoLexerRules::MikoLexerRules(CharStream *input) : Lexer(input) {
  MikoLexerRules::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *mikolexerrulesLexerStaticData->atn, mikolexerrulesLexerStaticData->decisionToDFA, mikolexerrulesLexerStaticData->sharedContextCache);
}

MikoLexerRules::~MikoLexerRules() {
  delete _interpreter;
}

std::string MikoLexerRules::getGrammarFileName() const {
  return "MikoLexerRules.g4";
}

const std::vector<std::string>& MikoLexerRules::getRuleNames() const {
  return mikolexerrulesLexerStaticData->ruleNames;
}

const std::vector<std::string>& MikoLexerRules::getChannelNames() const {
  return mikolexerrulesLexerStaticData->channelNames;
}

const std::vector<std::string>& MikoLexerRules::getModeNames() const {
  return mikolexerrulesLexerStaticData->modeNames;
}

const dfa::Vocabulary& MikoLexerRules::getVocabulary() const {
  return mikolexerrulesLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MikoLexerRules::getSerializedATN() const {
  return mikolexerrulesLexerStaticData->serializedATN;
}

const atn::ATN& MikoLexerRules::getATN() const {
  return *mikolexerrulesLexerStaticData->atn;
}




void MikoLexerRules::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mikolexerrulesLexerInitialize();
#else
  ::antlr4::internal::call_once(mikolexerrulesLexerOnceFlag, mikolexerrulesLexerInitialize);
#endif
}
